{"version":3,"sources":["Modal.module.css","taskCard.js","Modal.jsx","App.js","reportWebVitals.js","index.js","App.module.css"],"names":["module","exports","darkBG","centered","modal","actionsContainer","submitButton","boxText","labels","TaskCards","props","_useState","useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","setIsOpen","_useState7","_useState8","currStyle","newStyle","_useState9","_useState10","initialLoad","setInitialLoad","removeTask","taskId","fetch","App","baseAPI","concat","method","then","response","json","data","success","prevTasks","filter","task","_id","alert","addTask","newTask","title","$","val","desc","dueDate","tags","split","map","tag","trim","body","JSON","stringify","headers","Content-Type","insertedId","updatedTask","_objectSpread","status","completed","_useState11","_useState12","editingTaskId","setEditingTaskId","_useState13","_useState14","editedTitle","setEditedTitle","_useState15","_useState16","editedDueDate","setEditedDueDate","_useState17","_useState18","editedDesc","setEditedDesc","_useState19","_useState20","editedTags","setEditedTags","editTask","updatedData","newTaskData","Accept","updatedTasks","_useState21","_useState22","isCompleted","useEffect","length","React","createElement","className","width","height","viewBox","xmlns","x1","y1","x2","y2","id","stop-color","stop-opacity","offset","fill","fill-rule","transform","d","stroke","stroke-width","attributeName","type","from","to","dur","repeatCount","cx","cy","r","key","onClick","style","marginRight","value","onChange","e","target","join","marginLeft","newCompleted","console","log","toggleCompletion","text-decoration","color","Modal","_ref","Fragment","styles","margin-left","RiCloseLine","modalActions","htmlFor","isOpen","rel","href","crossOrigin","src","accentButton","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3a344187.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkBG\":\"Modal_darkBG__1VMxW\",\"centered\":\"Modal_centered__zOeRT\",\"modal\":\"Modal_modal__Ava1j\",\"actionsContainer\":\"Modal_actionsContainer__2mi8B\",\"submitButton\":\"Modal_submitButton__2F94L\",\"boxText\":\"Modal_boxText__3X-tb\",\"labels\":\"Modal_labels__fYidt\"};","import React, { useState, useEffect} from 'react'\r\nimport App from './App.js'\r\nimport $ from 'jquery'\r\n\r\nlet newTask = {'id': 0, 'title': \"Simple Task New\", 'desc': \"simple description\", 'dueDate': \"1/1/1\", \"tags\": ['test', 'test1'], \"status\": \"incomplete\", 'completed' : false};\r\n\r\nfunction TaskCards(props) {\r\n\r\n    let [tasks, setTasks] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [currStyle, newStyle] = useState(false);\r\n    const [initialLoad, setInitialLoad] = useState(true);\r\n    let hackieFix = isOpen;\r\n    if (hackieFix) {\r\n        //nothing\r\n    }\r\n    const changeStyle = () => {\r\n        newStyle(!currStyle);\r\n    }\r\n\r\n    function addTask(task){\r\n        let newTask = {\r\n            title: $('#boxTitleText').val(),\r\n            desc: $('#boxDescriptionText').val(),\r\n            dueDate : $('#boxDueDateText').val(),\r\n            tags : $('#boxTagsText').val().split(',').map(tag => tag.trim()),\r\n        }\r\n        fetch(App.baseAPI + \"/api/v1/tasks/createTask\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(newTask),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                if (data.success) {\r\n                    // set task id from the id returned by the API\r\n                    const newId = data.insertedId;\r\n                    // add task with new id to task array\r\n                    const updatedTask = { ...newTask,\r\n                        _id: data.insertedId,\r\n                        title: newTask.title,\r\n                        desc: newTask.desc,\r\n                        dueDate: newTask.dueDate,\r\n                        tags: newTask.tags,\r\n                        status: \"incomplete\",\r\n                        completed: false\r\n                    };\r\n                    // update tasks\r\n                    setTasks((prevTasks) => prevTasks.concat(updatedTask));\r\n                }\r\n            })\r\n    }\r\n    TaskCards.addTask = addTask;\r\n\r\n    /* newly implemented api removetask*/\r\n    function removeTask (taskId) {\r\n        // Send a request to the API to delete the task by its ID\r\n        fetch(App.baseAPI + `/api/v1/tasks/deleteTaskByID/${taskId}`, {\r\n            method: 'DELETE',\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    // If the task was successfully deleted online, remove it locally <- this should be handled the other way around but is fine for school. -Justin\r\n                    setTasks((prevTasks) => prevTasks.filter((task) => task._id !== taskId));\r\n                } else {\r\n                    alert('Task deletion failed. Please try again.');\r\n                }\r\n            })\r\n    }\r\n    TaskCards.removeTask = removeTask;\r\n\r\n    const [editingTaskId, setEditingTaskId] = useState(null);\r\n    const [editedTitle, setEditedTitle] = useState('');\r\n    const [editedDueDate, setEditedDueDate] = useState('');\r\n    const [editedDesc, setEditedDesc] = useState('');\r\n    const [editedTags, setEditedTags] = useState('');\r\n\r\n    function editTask(taskId) {\r\n        const updatedData = {\r\n            title: editedTitle,\r\n            dueDate: editedDueDate,\r\n            desc: editedDesc,\r\n            tags: editedTags.split(',').map(tag => tag.trim()),\r\n        };\r\n        //The map lets us find the specific task to get the info that won't change such as status and complete\r\n        tasks.map((task) => {\r\n            if (task._id === taskId) {\r\n                let newTaskData = {\r\n                    'title': editedTitle,\r\n                    'desc': editedDesc,\r\n                    'dueDate': editedDueDate,\r\n                    \"tags\": editedTags.split(',').map(tag => tag.trim()),\r\n                    \"status\": task.status,\r\n                    'completed' : task.completed\r\n                }\r\n                fetch(App.baseAPI + \"/api/v1/tasks/updateTaskByID/\" + taskId, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(newTaskData)\r\n                })\r\n            }\r\n        })\r\n        const updatedTasks = tasks.map((task) => {\r\n            if (task._id === taskId) {\r\n                return { ...task, ...updatedData };\r\n            }\r\n            return task;\r\n        });\r\n        setTasks(updatedTasks);\r\n        setEditingTaskId(null); // Clear editing state after saving changes\r\n    }\r\n    TaskCards.editTask = editTask;\r\n\r\n    //Constants for card Completion button\r\n    const [isCompleted, setIsCompleted] = useState(false);\r\n\r\n        // Function to toggle completed status\r\n        const toggleCompletion = (taskId) => {\r\n            let newCompleted = null;\r\n             tasks.map((task) => {\r\n                    if (task._id === taskId) {\r\n                        newCompleted = !task.completed;\r\n                        let newTaskData = {'title': task.title, 'desc': task.desc, 'dueDate': task.dueDate, \"tags\": task.tags, \"status\": task.status, 'completed' : newCompleted}\r\n                        console.log(newTaskData);\r\n                        fetch(App.baseAPI + \"/api/v1/tasks/updateTaskByID/\" + taskId, {\r\n                            method: \"PUT\",\r\n                            headers: {\r\n                                'Accept': 'application/json',\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            body: JSON.stringify(newTaskData)\r\n                        })\r\n                    }\r\n             })\r\n            setTasks((prevTasks) =>\r\n                prevTasks.map((task) =>\r\n                    task._id === taskId ? { ...task, completed: newCompleted } : task\r\n                )\r\n            );\r\n        };\r\n\r\n    useEffect(() => {\r\n        if (initialLoad) {\r\n            fetch(App.baseAPI + \"/api/v1/tasks/getTasks\", {\r\n                method: \"GET\"\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if ( data.length != null) {\r\n                        setTasks(data)\r\n                        setInitialLoad(false);\r\n                        setIsLoading(false);\r\n                    } else {\r\n                        //Do nothing grab probably failed due to pull limit due to using the free mongodb option\r\n                        //This will essentially try again till the timeout is done\r\n                    }\r\n                });\r\n        }\r\n    })\r\n\r\n    return (\r\n        <section className=\"cardContainer\">\r\n            <div className={`${isLoading ? 'LoadingScreen' : 'hideLoading'}`}>\r\n                <svg width={`${isLoading ? '100' : '0'}`} height={`${isLoading ? '100' : '0'}`} viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <defs>\r\n                        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\r\n                            <stop stop-color=\"#fff\" stop-opacity=\"0\" offset=\"0%\"/>\r\n                            <stop stop-color=\"#fff\" stop-opacity=\".631\" offset=\"63.146%\"/>\r\n                            <stop stop-color=\"#fff\" offset=\"100%\"/>\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <g fill=\"none\" fill-rule=\"evenodd\">\r\n                        <g transform=\"translate(1 1)\">\r\n                            <path d=\"M36 18c0-9.94-8.06-18-18-18\" id=\"Oval-2\" stroke=\"url(#a)\" stroke-width=\"2\">\r\n                                <animateTransform\r\n                                    attributeName=\"transform\"\r\n                                    type=\"rotate\"\r\n                                    from=\"0 18 18\"\r\n                                    to=\"360 18 18\"\r\n                                    dur=\"0.9s\"\r\n                                    repeatCount=\"indefinite\" />\r\n                            </path>\r\n                            <circle fill=\"#fff\" cx=\"36\" cy=\"18\" r=\"1\">\r\n                                <animateTransform\r\n                                    attributeName=\"transform\"\r\n                                    type=\"rotate\"\r\n                                    from=\"0 18 18\"\r\n                                    to=\"360 18 18\"\r\n                                    dur=\"0.9s\"\r\n                                    repeatCount=\"indefinite\" />\r\n                            </circle>\r\n                        </g>\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n            {tasks.map(task => (\r\n                <div key={task._id} className={` ${task.completed ? 'completed completedBackground' : ''}`}>\r\n                    {task.status == 'incomplete'?\r\n                        <div className={`card ${isCompleted ? 'completed' : ''}`}>\r\n                        {/* This is under modification, the check for editing, Nate (10/07/23)*/}\r\n                        {editingTaskId === task._id ? ( // while status is incomplete, check for if a task is being edited or not\r\n                            <div className=\"editView\">\r\n                                <button className=\"accentButton cardButton\" onClick={() => editTask(task._id)} style={{\"marginRight\": \"0px\"}} >Save</button>\r\n                                <div className=\"editFields\">\r\n                                    <input className=\"editInput\" type=\"text\" value={editedTitle} onChange={(e) => setEditedTitle(e.target.value)} />\r\n                                    <input className=\"editInput\" type=\"text\" value={editedDueDate} onChange={(e) => setEditedDueDate(e.target.value)} />\r\n                                    <input className=\"editInput\" type=\"text\" value={editedDesc} onChange={(e) => setEditedDesc(e.target.value)}  />\r\n                                    <input className=\"editInput\" type=\"text\" value={editedTags} onChange={(e) => setEditedTags(e.target.value)} />\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <button className=\"accentButton cardButton\" onClick={() => {\r\n                                setEditingTaskId(task._id);\r\n                                // Populate the input fields with the current task data\r\n                                setEditedTitle(task.title);\r\n                                setEditedDueDate(task.dueDate);\r\n                                setEditedDesc(task.desc);\r\n                                setEditedTags(task.tags.join(', '));\r\n                                {setIsOpen(true);}\r\n                            }} style={{ \"marginLeft\": \"30px\" }} >Edit</button>\r\n                        )}\r\n                        {/* End of prototype code Nate (10/07/23)*/}\r\n                        <p className={`cardDueDate ${task.completed ? 'completed' : 'uncompleted'}`}>{task.dueDate}</p>\r\n                        <div>\r\n                            <h1 className={`cardTitle ${task.completed ? 'completed' : 'uncompleted'}`}>{task.title}</h1>\r\n                            <p className={`cardDescription ${task.completed ? 'completed' : 'uncompleted'}`}>{task.desc}</p>\r\n                            <div className=\"cardTags\">\r\n                                {task.tags.map((tag) => (\r\n                                    <h2 className=\"tag\">{tag}</h2>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Add callback function to buttons below */}\r\n                        <button className={currStyle ? \"accentButton cardButton spaceButton\" : \"accentButton cardButton spaceButton\"} onClick={() => {toggleCompletion(task._id); changeStyle();}}\r\n                        style={{\"marginLeft\": \"auto\"}}>{task.completed ? \"Uncomplete\" : \"Complete\"}</button>\r\n\r\n\r\n                        <button className=\"accentButton cardButton\" onClick={() => removeTask(task._id)} style={{\"marginRight\": \"50px\"}}>Delete</button>\r\n                    </div>:  <div className=\"card\">\r\n                        <p className=\"cardDueDate\" style={{\"text-decoration\": \"line-through\", \"color\": \"gray\"}}>{task.dueDate}</p>\r\n                        <div>\r\n                            <h1 className=\"cardTitle\" style={{\"text-decoration\": \"line-through\", \"color\": \"gray\"}}>{task.title}</h1>\r\n                            <p className=\"cardDescription\" style={{\"text-decoration\": \"line-through\", \"color\": \"gray\"}}>{task.desc}</p>\r\n                            <div className=\"cardTags\">\r\n                                {task.tags.map((tag) => (\r\n                                    <h2 className=\"tag\">{tag}</h2>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        {/* Add callback function to buttons below */}\r\n                        <button className=\"accentButton cardButton\" style={{\"marginLeft\": \"auto\"}}>Uncomplete</button>\r\n                        <button className=\"accentButton cardButton\" style={{\"marginRight\": \"50px\"}}>Delete</button>\r\n                    </div>}\r\n                    <div className=\"accentLine\" />\r\n                </div>\r\n            ))}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default TaskCards","import React from \"react\";\r\nimport styles from \"./Modal.module.css\";\r\nimport { RiCloseLine } from \"react-icons/ri\";\r\nimport TaskCards from \"./taskCard\";\r\n\r\n  \r\n  const Modal = ({ setIsOpen }) => {\r\n  return (\r\n    <>\r\n      <div className={styles.darkBG} onClick={() => setIsOpen(false)} />\r\n      <div className={styles.centered}>\r\n        <div className={styles.modal}>\r\n          \r\n          <button className={styles.submitButton} style={{\"margin-left\": \"253px\"}} onClick={() => setIsOpen(false)}>\r\n            <RiCloseLine >Close</RiCloseLine>\r\n          </button>\r\n          <div className={styles.modalActions}>\r\n            <div className={styles.actionsContainer}>\r\n                <div>\r\n                    <label htmlFor=\"boxTitleText\" className={styles.labels}>Title</label>\r\n                    <input type=\"text\" id=\"boxTitleText\"\r\n                    className={styles.boxText} />\r\n                    <br />\r\n                    <label htmlFor=\"boxDescriptionText\" className={styles.labels}>Description</label>\r\n                    <input type=\"text\" id=\"boxDescriptionText\"\r\n                    className={styles.boxText} />\r\n                    <br />\r\n                    <label htmlFor=\"dueDate\" className={styles.labels}>Due Date</label>\r\n                    <input type=\"text\" id=\"boxDueDateText\"\r\n                    className={styles.boxText} />\r\n                    <br />\r\n                    <label htmlFor=\"boxTagsText\" className={styles.labels}>Tags</label>\r\n                    <input type=\"text\" id=\"boxTagsText\"\r\n                    className={styles.boxText} />\r\n                </div>\r\n            </div>\r\n          </div>\r\n          <button\r\n                className={styles.submitButton}\r\n                onClick={() => {\r\n                  setIsOpen(false);\r\n                  TaskCards.addTask();}}>\r\n                Submit\r\n              </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n };\r\n\r\nexport default Modal;","//import logo from './logo.svg';\r\nimport './styles.css';\r\n//import React from 'react';\r\nimport TaskCards from './taskCard'\r\nimport Modal from './Modal.jsx';\r\nimport React, { useState } from \"react\";\r\nimport styles from \"./App.module.css\";\r\n// This is the dictionary of task, ID should be unique on creation\r\n// Card will render as complete if status = \"complete\"\r\n// Card will render as incomplete if status = \"incomplete\"\r\n\r\nfunction App() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  App.baseAPI = \"http://localhost:3000\";\r\n\r\n  const [tasks, setTasks] = useState([\r\n    {'id': 0, 'title': \"Simple Task\", 'desc': \"simple description\", 'dueDate': \"1/1/1\", \"tags\": ['test', 'test1'], \"status\": \"incomplete\"}\r\n  ])\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"/>\r\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin/>\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;0,1000;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900;1,1000&display=swap\" rel=\"stylesheet\"/>\r\n        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js\"></script>\r\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.css\" />\r\n        <title>Task Master</title>\r\n      </header>\r\n      <div className=\"accentBackDrop\"></div>\r\n      <div className=\"bodyWorkAround\">\r\n        <section className=\"titleSection\">\r\n            <h1 className=\"appTitle\">T a s k  M a s t e r</h1>\r\n        </section>\r\n        <TaskCards />\r\n\r\n        <section className=\"createCard\">\r\n          \r\n          <main>\r\n            <button className={styles.accentButton} onClick={() => \r\n            {setIsOpen(true);}}>Add Task</button>\r\n            {isOpen && <Modal setIsOpen={setIsOpen} />}\r\n          </main>\r\n          \r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n// This is test code again","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n     <React.StrictMode>\r\n        <App />\r\n     </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accentButton\":\"App_accentButton__2a03Q\"};"],"sourceRoot":""}