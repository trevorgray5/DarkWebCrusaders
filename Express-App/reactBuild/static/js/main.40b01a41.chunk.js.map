{"version":3,"sources":["Modal.module.css","taskCard.js","Modal.jsx","App.js","reportWebVitals.js","index.js","App.module.css"],"names":["module","exports","darkBG","centered","modal","actionsContainer","submitButton","boxText","labels","newTask","id","title","desc","dueDate","tags","status","completed","TaskCards","props","_useState","useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","setIsOpen","_useState5","_useState6","currStyle","newStyle","removeTask","taskId","prevTasks","filter","task","addTask","newId","Math","max","apply","_toConsumableArray","map","concat","updatedTask","_objectSpread","$","val","split","tag","trim","_useState7","_useState8","editingTaskId","setEditingTaskId","_useState9","_useState10","editedTitle","setEditedTitle","_useState11","_useState12","editedDueDate","setEditedDueDate","_useState13","_useState14","editedDesc","setEditedDesc","_useState15","_useState16","editedTags","setEditedTags","editTask","updatedData","updatedTasks","_useState17","_useState18","isCompleted","useEffect","React","createElement","class","key","className","onClick","style","margin-right","type","value","onChange","e","target","join","margin-left","text-decoration","color","Modal","_ref","Fragment","styles","RiCloseLine","modalActions","htmlFor","App","isOpen","rel","href","crossOrigin","src","accentButton","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.40b01a41.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkBG\":\"Modal_darkBG__3un22\",\"centered\":\"Modal_centered__2T07T\",\"modal\":\"Modal_modal__1QsuW\",\"actionsContainer\":\"Modal_actionsContainer__2SdOB\",\"submitButton\":\"Modal_submitButton__3zF_E\",\"boxText\":\"Modal_boxText__2dVzg\",\"labels\":\"Modal_labels__QNsp3\"};","import React, { useState, useEffect} from 'react'\r\nimport $ from 'jquery'\r\n\r\nlet newTask = {'id': 0, 'title': \"Simple Task New\", 'desc': \"simple description\", 'dueDate': \"1/1/1\", \"tags\": ['test', 'test1'], \"status\": \"incomplete\", 'completed' : false};\r\n\r\nfunction TaskCards(props) {\r\n\r\n    let [tasks, setTasks] = useState([{'id': 0, 'title': \"Simple Task\", 'desc': \"simple description\", 'dueDate': \"1/1/1\", \"tags\": ['test', 'test1'], \"status\": \"incomplete\"}]);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const[currStyle, newStyle] = useState(false);\r\n    const changeStyle = () => {\r\n        newStyle(!currStyle);           \r\n    }\r\n\r\n    function addTask(task){\r\n        // Increase the tasks' id by one to make each task unique\r\n        const newId = Math.max(...tasks.map((task) => task.id), 0) + 1;\r\n        // add task with new id to task array\r\n        const updatedTask = { ...newTask, id: newId, \r\n                                          title: $('#boxTitleText').val(), \r\n                                          desc: $('#boxDescriptionText').val(), \r\n                                          dueDate : $('#boxDueDateText').val(),\r\n                                          tags : $('#boxTagsText').val().split(',').map(tag => tag.trim()),\r\n                                        };\r\n        // update tasks\r\n        setTasks((prevTasks) => prevTasks.concat(updatedTask));\r\n    }\r\n    TaskCards.addTask = addTask;\r\n\r\n    function removeTask (taskId) {\r\n        // removes task based on id\r\n        setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\r\n    }\r\n    TaskCards.removeTask = removeTask;\r\n\r\n    /* \r\n    * function is almost complete but only takes one character of input\r\n    */\r\n    const [editingTaskId, setEditingTaskId] = useState(null);\r\n    const [editedTitle, setEditedTitle] = useState('');\r\n    const [editedDueDate, setEditedDueDate] = useState('');\r\n    const [editedDesc, setEditedDesc] = useState('');\r\n    const [editedTags, setEditedTags] = useState('');\r\n\r\n    function editTask(taskId) {\r\n        const updatedData = {\r\n            title: editedTitle,\r\n            dueDate: editedDueDate,\r\n            desc: editedDesc,\r\n            tags: editedTags.split(',').map(tag => tag.trim()),\r\n        };\r\n\r\n        const updatedTasks = tasks.map((task) => {\r\n            if (task.id === taskId) {\r\n                return { ...task, ...updatedData };\r\n            }\r\n            return task;\r\n        });\r\n        setTasks(updatedTasks);\r\n        setEditingTaskId(null); // Clear editing state after saving changes\r\n    }\r\n    TaskCards.editTask = editTask;\r\n\r\n    //Constants for card Completion button\r\n    const [isCompleted, setIsCompleted] = useState(false);\r\n\r\n        // Function to toggle completed status\r\n        const toggleCompletion = (taskId) => {\r\n            setTasks((prevTasks) =>\r\n                prevTasks.map((task) =>\r\n                    task.id === taskId ? { ...task, completed: !task.completed } : task\r\n                )\r\n            );\r\n        };\r\n\r\n    useEffect(() => {\r\n    })\r\n\r\n    return (\r\n        <section class=\"cardContainer\">\r\n            {tasks.map(task => (\r\n                <div key={task.id} className={` ${task.completed ? 'completed completedBackground' : ''}`}>\r\n                    {task.status == 'incomplete'?\r\n                        <div className={`card ${isCompleted ? 'completed' : ''}`}>\r\n                        {/* This is under modification, the check for editing, Nate (10/07/23)*/}\r\n                        {editingTaskId === task.id ? ( // while status is incomplete, check for if a task is being edited or not\r\n                            <div className=\"editView\">\r\n                                <button className=\"accentButton cardButton\" onClick={() => editTask(task.id)} style={{ \"margin-right\": \"0px\" }} >Save</button>\r\n                                <div className=\"editFields\">\r\n                                    <input className=\"editInput\" type=\"text\" value={editedTitle} onChange={(e) => setEditedTitle(e.target.value)} />\r\n                                    <input className=\"editInput\" type=\"text\" value={editedDueDate} onChange={(e) => setEditedDueDate(e.target.value)} />\r\n                                    <input className=\"editInput\" type=\"text\" value={editedDesc} onChange={(e) => setEditedDesc(e.target.value)}  />\r\n                                    <input className=\"editInput\" type=\"text\" value={editedTags} onChange={(e) => setEditedTags(e.target.value)} />\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <button className=\"accentButton cardButton\" onClick={() => {\r\n                                setEditingTaskId(task.id);\r\n                                // Populate the input fields with the current task data\r\n                                setEditedTitle(task.title);\r\n                                setEditedDueDate(task.dueDate);\r\n                                setEditedDesc(task.desc);\r\n                                setEditedTags(task.tags.join(', '));\r\n                                {setIsOpen(true);}\r\n                            }} style={{ \"margin-left\": \"30px\" }} >Edit</button>\r\n                        )}\r\n                        {/* End of prototype code Nate (10/07/23)*/}\r\n                        <p className={`cardDueDate ${task.completed ? 'completed' : 'uncompleted'}`}>{task.dueDate}</p>\r\n                        <div>\r\n                            <h1 className={`cardTitle ${task.completed ? 'completed' : 'uncompleted'}`}>{task.title}</h1>\r\n                            <p className={`cardDescription ${task.completed ? 'completed' : 'uncompleted'}`}>{task.desc}</p>\r\n                            <div className=\"cardTags\">\r\n                                {task.tags.map((tag) => (\r\n                                    <h2 className=\"tag\">{tag}</h2>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        {/* Add callback function to buttons below */}\r\n                        <button className={currStyle ? \"accentButton cardButton spaceButton\" : \"accentButton cardButton spaceButton\"} onClick={() => {toggleCompletion(task.id); changeStyle();}}\r\n                        style={{\"margin-left\": \"auto\"}}>{task.completed ? \"Uncomplete\" : \"Complete\"}</button>\r\n                        \r\n                        \r\n                        <button class=\"accentButton cardButton\" onClick={() => removeTask(task.id)} style={{\"margin-right\": \"50px\"}}>Delete</button>\r\n                    </div>:  <div class=\"card\">\r\n                        <p class=\"cardDueDate\" style={{\"text-decoration\": \"line-through\", \"color\": \"gray\"}}>{task.dueDate}</p>\r\n                        <div>\r\n                            <h1 class=\"cardTitle\" style={{\"text-decoration\": \"line-through\", \"color\": \"gray\"}}>{task.title}</h1>\r\n                            <p class=\"cardDescription\" style={{\"text-decoration\": \"line-through\", \"color\": \"gray\"}}>{task.desc}</p>\r\n                            <div class=\"cardTags\">\r\n                                {task.tags.map((tag) => (\r\n                                    <h2 class=\"tag\">{tag}</h2>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        {/* Add callback function to buttons below */}\r\n                        <button class=\"accentButton cardButton\" style={{\"margin-left\": \"auto\"}}>Uncomplete</button>\r\n                        <button class=\"accentButton cardButton\" style={{\"margin-right\": \"50px\"}}>Delete</button>\r\n                    </div>}\r\n                    <div class=\"accentLine\" />\r\n                </div>\r\n            ))}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default TaskCards","import React from \"react\";\r\nimport styles from \"./Modal.module.css\";\r\nimport { RiCloseLine } from \"react-icons/ri\";\r\nimport TaskCards from \"./taskCard\";\r\n\r\n  \r\n  const Modal = ({ setIsOpen }) => {\r\n  return (\r\n    <>\r\n      <div className={styles.darkBG} onClick={() => setIsOpen(false)} />\r\n      <div className={styles.centered}>\r\n        <div className={styles.modal}>\r\n          \r\n          <button className={styles.submitButton} style={{\"margin-left\": \"253px\"}} onClick={() => setIsOpen(false)}>\r\n            <RiCloseLine >Close</RiCloseLine>\r\n          </button>\r\n          <div className={styles.modalActions}>\r\n            <div className={styles.actionsContainer}>\r\n                <div>\r\n                    <label htmlFor=\"boxTitleText\" className={styles.labels}>Title</label>\r\n                    <input type=\"text\" id=\"boxTitleText\"\r\n                    className={styles.boxText} />\r\n                    <br />\r\n                    <label htmlFor=\"boxDescriptionText\" className={styles.labels}>Description</label>\r\n                    <input type=\"text\" id=\"boxDescriptionText\"\r\n                    className={styles.boxText} />\r\n                    <br />\r\n                    <label htmlFor=\"dueDate\" className={styles.labels}>Due Date</label>\r\n                    <input type=\"text\" id=\"boxDueDateText\"\r\n                    className={styles.boxText} />\r\n                    <br />\r\n                    <label htmlFor=\"boxTagsText\" className={styles.labels}>Tags</label>\r\n                    <input type=\"text\" id=\"boxTagsText\"\r\n                    className={styles.boxText} />\r\n                </div>\r\n            </div>\r\n          </div>\r\n          <button\r\n                className={styles.submitButton}\r\n                onClick={() => {\r\n                  setIsOpen(false);\r\n                  TaskCards.addTask();}}>\r\n                Submit\r\n              </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n };\r\n\r\nexport default Modal;","//import logo from './logo.svg';\r\nimport './styles.css';\r\n//import React from 'react';\r\nimport TaskCards from './taskCard'\r\nimport Modal from './Modal.jsx';\r\nimport React, { useState } from \"react\";\r\nimport styles from \"./App.module.css\";\r\n// This is the dictionary of task, ID should be unique on creation\r\n// Card will render as complete if status = \"complete\"\r\n// Card will render as incomplete if status = \"incomplete\"\r\n\r\nfunction App() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const [tasks, setTasks] = useState([\r\n    {'id': 0, 'title': \"Simple Task\", 'desc': \"simple description\", 'dueDate': \"1/1/1\", \"tags\": ['test', 'test1'], \"status\": \"incomplete\"}\r\n  ])\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"/>\r\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin/>\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;0,1000;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900;1,1000&display=swap\" rel=\"stylesheet\"/>\r\n        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js\"></script>\r\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.css\" />\r\n        <title>Task Master</title>\r\n      </header>\r\n      <div className=\"accentBackDrop\"></div>\r\n      <div className=\"bodyWorkAround\">\r\n        <section className=\"titleSection\">\r\n            <h1 className=\"appTitle\">T a s k  M a s t e r</h1>\r\n        </section>\r\n        <TaskCards />\r\n\r\n        <section className=\"createCard\">\r\n          \r\n          <main>\r\n            <button className={styles.accentButton} onClick={() => \r\n            {setIsOpen(true);}}>Add Task</button>\r\n            {isOpen && <Modal setIsOpen={setIsOpen} />}\r\n          </main>\r\n          \r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n// This is test code again","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accentButton\":\"App_accentButton__v9XVZ\"};"],"sourceRoot":""}